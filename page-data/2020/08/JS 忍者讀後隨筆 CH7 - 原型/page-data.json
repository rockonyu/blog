{"componentChunkName":"component---src-templates-posts-tsx","path":"/2020/08/JS 忍者讀後隨筆 CH7 - 原型/","result":{"data":{"site":{"siteMetadata":{"title":"Austin Chang"}},"markdownRemark":{"id":"8a823622-167a-5a8d-a2f7-42c7b1831217","excerpt":"簡單的筆記與紀錄額外參考，原作：忍者：JavaScript  開發技巧探秘 7.1 瞭解原型 透過原型，物件可以存取屬於其他物件的屬性。\n當存取物件所沒有的屬性時，會在物件原型裡搜索該屬性。 7.…","html":"<p>簡單的筆記與紀錄額外參考，原作：<a href=\"https://www.books.com.tw/products/0010701459\" target=\"_blank\">忍者：JavaScript  開發技巧探秘</a></p>\n<h2>7.1 瞭解原型</h2>\n<p>透過原型，物件可以存取屬於其他物件的屬性。\n當存取物件所沒有的屬性時，會在物件原型裡搜索該屬性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> yoshi <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> skulk<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> hattori <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> sneak<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>yoshi<span class=\"token punctuation\">,</span> hattori<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>7.2 物件建構與原型</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">swingSword</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 <code class=\"language-text\">new</code> 運算子呼叫，會建立一個全新的物件，而 <code class=\"language-text\">swingSword</code> 函式會在實例化的物件間共用。\n若將方法定義在 <code class=\"language-text\">Ninja</code> 函式內，代表每個實例化的物件都各自保有方法定義。\n每個函式的原型物件都有一個 <code class=\"language-text\">constructor</code> 屬性，會參照到建構器函式。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ninja <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ninja2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ninja<span class=\"token punctuation\">.</span>constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>7.3 實現物件繼承</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> ninja <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nninja<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Person</code></pre></div>\n<p>解決 <code class=\"language-text\">constructor</code> 屬性的問題</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 新增一個不可列舉的 constructor 屬性並指回 Ninja</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"constructor\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    value Ninja<span class=\"token punctuation\">,</span>\n    writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nninja<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Ninja</code></pre></div>\n<p><code class=\"language-text\">instanceof</code> 運算子會檢查 <code class=\"language-text\">Ninja</code> 函式目前的原型，是否出現在 <code class=\"language-text\">ninja</code> 物件實例的原型串鏈上。</p>\n<h2>7.4 在 ES6 裡使用 JavaScript 的類別</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用 extends 關鍵字來繼承其他類別</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Ninja</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> weapon</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> weapon<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">wieldWeapon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>7.5 小結</h1>","frontmatter":{"title":"JS 忍者讀後隨筆 CH7 - 以原型實現物件導向","date":"2020/8/30","description":null}}},"pageContext":{"slug":"/2020/08/JS 忍者讀後隨筆 CH7 - 原型/","previous":{"fields":{"slug":"/2020/08/JS 忍者讀後隨筆 CH6 - Promise/"},"frontmatter":{"title":"JS 忍者讀後隨筆 CH6 - Promise","tags":["JS Ninja"]}},"next":null}}}